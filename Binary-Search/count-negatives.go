package ALGORITHM

/**
@author: alvin
@create: 2024-12-08 15:29
title: 统计有序矩阵中的负数
@description: 给你一个 m * n 的矩阵 grid，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。请你统计并返回 grid 中 负数 的数目。
题解：
	1. 暴力法：两层循环，时间复杂度O(n^2)
	2. 二分法：时间复杂度O(nlogn)，空间复杂度O(1)
	3. 双指针法：时间复杂度O(n+m)，空间复杂度O(1) - 最优解
*/

func countNegatives(grid [][]int) int {
	m, n := len(grid), len(grid[0]) // m行，n列
	count := 0
	// 从第一行最后一个元素开始遍历, 即从右上角开始遍历(关键点)，因为第一行最后一个元素是最大的，第二行最后一个元素是第二大的，以此类推，直到第一列最后一个元素，即左下角的元素
	 row, col := 0, n-1 // 从第一行最后一个元素开始遍历
	 for row < m && col >= 0 { 
		if grid[row][col] < 0 {
			count += m - row // 统计负数的个数，因为是从第一行最后一个元素开始遍历，所以如果当前元素小于0，那么当前元素后面的所有元素都小于0，因为当前元素是最大的，所以当前元素后面的所有元素都小于0，所以统计负数的个数，就是m-row
			col -- // 向左移动
		} else {
			row ++ // 向下移动
		}
	 }
	return count
}